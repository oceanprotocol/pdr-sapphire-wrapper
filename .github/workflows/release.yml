name: Build Library

on:
  push:
    tags:
      - 'v*'
jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
        - goos: darwin
          goarch: amd64
          ext: '.dylib'
          os: macos-latest
        
        - goos: linux
          goarch: amd64
          ext: '.so'
          CC: gcc
          CXX: g++
          os: ubuntu-20.04

        - goos: darwin
          goarch: arm64
          ext: '.dylib'
          os: macos-latest
        
        - goos: linux
          goarch: arm64
          ext: '.so'
          CC: aarch64-linux-gnu-gcc
          CXX: aarch64-linux-gnu-g++
          os: ubuntu-20.04

        - goos: windows
          goarch: amd64
          ext: '.dll'
          os: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Setup msbuild
      if: matrix.goos == 'windows'
      uses: microsoft/setup-msbuild@v1.1

    - name: Install aarch64-linux-gnu-gcc (for linux/arm64 builds only)
      if: matrix.goos == 'linux' && matrix.goarch == 'arm64'
      run: sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

    - name: Build Library
      run: |
        export GOOS=${{ matrix.goos }}
        export GOARCH=${{ matrix.goarch }}
        export CC=${{ matrix.CC }}
        export CXX=${{ matrix.CXX }}
        export CGO_ENABLED=1
        export PATH="$(pwd)/osxcross/target/bin:$PATH"
        cd go
        go mod tidy
        go build -o sapphirewrapper-${{ matrix.goarch }}${{ matrix.ext }} -buildmode=c-shared
      shell: bash

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: sapphirewrapper-${{ matrix.goos }}-${{ matrix.goarch }}
        path: ./go/sapphirewrapper-${{ matrix.goarch }}${{ matrix.ext }}


  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download built library - Linux
        uses: actions/download-artifact@v4.1.7
        with:
          name: sapphirewrapper-linux-amd64
          path: ./bin/

      - name: Download built library - Darwin amd64
        uses: actions/download-artifact@v4.1.7
        with:
          name: sapphirewrapper-darwin-amd64
          path: ./bin/

      - name: Download built library - Darwin arm64
        uses: actions/download-artifact@v4.1.7
        with:
          name: sapphirewrapper-darwin-arm64
          path: ./bin/

      - name: Download built library - Linux arm64
        uses: actions/download-artifact@v4.1.7
        with:
          name: sapphirewrapper-linux-arm64
          path: ./bin/

      - name: Download built library - Windows amd64
        uses: actions/download-artifact@v4.1.7
        with:
          name: sapphirewrapper-windows-amd64
          path: ./bin/
    
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset - Linux
        id: upload-release-asset-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/sapphirewrapper-amd64.so
          asset_name: sapphirewrapper-linux-amd64.so
          asset_content_type: application/octet-stream

      - name: Upload Release Asset - Linux arm64
        id: upload-release-asset-linux-arm64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/sapphirewrapper-arm64.so
          asset_name: sapphirewrapper-linux-arm64.so
          asset_content_type: application/octet-stream

      - name: Upload Release Asset - Darwin
        id: upload-release-asset-darwin
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/sapphirewrapper-amd64.dylib
          asset_name: sapphirewrapper-darwin-amd64.dylib
          asset_content_type: application/octet-stream

      - name: Upload Release Asset - Darwin arm64
        id: upload-release-asset-darwin-arm64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/sapphirewrapper-arm64.dylib
          asset_name: sapphirewrapper-darwin-arm64.dylib
          asset_content_type: application/octet-stream

      - name: Upload Release Asset - Windows amd64
        id: upload-release-asset-windows-amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/sapphirewrapper-amd64.dll
          asset_name: sapphirewrapper-windows-amd64.dll
          asset_content_type: application/octet-stream


      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install pypa/build
        run: >-
            python -m
            pip install
            build
            --user

      - name: Build a binary wheel and a source tarball
        run: >-
            python -m
            build
            --sdist
            --wheel
            --outdir dist/

      - name: Publish package
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
            user: __token__
            verbose: true
            password: ${{ secrets.PYPI_PASSWORD }}